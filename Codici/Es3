import math

class FormaGeometrica:
    def __init__(self, nome):
        self.__nome = nome  # Attributo privato: nome della forma

    @property
    def nome(self):
        return self.__nome

    def __str__(self):  # Metodo speciale per rappresentazione testuale
        return f"Forma Geometrica: {self.nome}"

    def _calcola_area(self):  # Metodo protetto (convenzione con underscore singolo)
        raise NotImplementedError("Il metodo _calcola_area deve essere implementato nelle sottoclassi")

class Cerchio(FormaGeometrica):
    def __init__(self, raggio):
        super().__init__("Cerchio")  # Chiama il costruttore della classe base
        self.__raggio = raggio

    @property
    def raggio(self):
        return self.__raggio

    @raggio.setter
    def raggio(self, nuovo_raggio):
        if nuovo_raggio > 0:
            self.__raggio = nuovo_raggio
        else:
            raise ValueError("Il raggio deve essere positivo")

    def _calcola_area(self):  # Implementazione specifica per il cerchio
        return math.pi * self.raggio**2

class Rettangolo(FormaGeometrica):{}
# ... (implementazione simile a Cerchio, con base e altezza)

# Esempio di utilizzo
cerchio1 = Cerchio(5)
print(cerchio1)  # Output: Forma Geometrica: Cerchio
print(f"Area del cerchio: {cerchio1._calcola_area()}")  # Accesso al metodo protetto

# Tentativo di accesso diretto all'attributo privato (non consentito)
# print(cerchio1.__raggio)  # Genera un errore